const Sequelize = require('sequelize')
    const communityEntities = require('./models/CommunityEntities')

    const sequelize = new Sequelize(
    process.env.DB_NAME,
    process.env.DB_USER,
    process.env.DB_PASSWORD,
    {
        dialect: 'mysql',
        host: process.env.DB_HOST,
        port: process.env.DB_PORT,
        // disable logging; default: console.log
        logging: false
    }
    )

    const CommunityEntity = communityEntities.community(sequelize, Sequelize)
    const CommunityAddressEntity = communityEntities.community_address(sequelize, Sequelize)
    const CommunityContactEntity = communityEntities.community_contact(sequelize, Sequelize)
    const GeoAddressEntity = communityEntities.geo_address(sequelize, Sequelize)
    const Models = { CommunityEntity,CommunityAddressEntity,CommunityContactEntity,GeoAddressEntity }
    const connection = {}
    CommunityEntity.hasOne(CommunityAddressEntity,{as: 'address', foreignKey : 'community'})
    CommunityEntity.hasMany(CommunityContactEntity,{as: 'contacts', foreignKey : 'community'})
    CommunityAddressEntity.belongsTo(CommunityEntity,{foreignKey: 'community', targetKey: 'handlecode'})
    CommunityContactEntity.belongsTo(CommunityEntity,{foreignKey: 'community', targetKey: 'handlecode'})
    CommunityAddressEntity.belongsTo(GeoAddressEntity,{as: 'geoaddress', foreignKey: 'geo_address', targetKey: 'id'})


    module.exports.sequelize = async () => {
    if (connection.isConnected) {
        console.log('=> Using existing connection.')
        return sequelize
    }

    //await sequelize.sync()
    await sequelize.authenticate()
    connection.isConnected = true
    console.log('=> Created a new connection.')  
    return sequelize
    }
    module.exports.models = async () => {
    if (!connection.isConnected) {
        await sequelize.authenticate()
        connection.isConnected = true
        console.log('=> Created a new connection.')  
    }
    return Models
    }


